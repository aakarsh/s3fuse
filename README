s3fuse
======

s3fuse is a FUSE (Filesystem in Userspace) driver for Amazon S3 and Google 
Storage.

- For notes on building and installing s3fuse, see INSTALL.
- For copyright/license information, see COPYING.
- For notes on configuring and running s3fuse, keep reading.

Goals
-----

- Thread safety -- concurrent operations should behave according to the
  principle of least astonishment.
- Compatibility with other S3 applications, including Amazon's web-based S3
  browser.
- Improved upload/download performance (by using multipart transfers).
- Support for extended file attributes.
- Support for consistency checking (using S3's MD5-testing features).

Known Issues
------------

- Reduced-redundancy storage (RRS) is not supported.
- No attempt is made to match MIME types to file extensions.
- Directory representation is not compatible with Google Storage Manager.  In
  particular:
  - Directories created by s3fuse appear to contain an empty, unnamed file in
    Google Storage Manager.
  - s3fuse lists empty directories created by Google Storage Manager as 
    regular files named <directory-name>_$folder$.
  - s3fuse cannot list the contents of directories created by Google Storage 
    Manager.

Configuration
-------------

Edit /etc/s3fuse.conf after installing.  The following keys must be defined:

  - service: This must be either "aws" or "google-storage".
  - bucket_name: This is the name of your S3 bucket.
  - auth_data: Authentication data (service-specific, see below).

auth_data for Amazon Web Services:

  For Amazon S3, set auth_data to the full path of a file containing your AWS 
  Access Key ID followed by a space, followed by the AWS Secret Access Key, 
  e.g.:

    auth_data=/home/user/.s3fuse/aws.key

  Where aws.key contains:

    <aws-access-key-id> <aws-secret-access-key>

  AWS credentials can be obtained using Amazon's AWS console.  The console 
  can also be used to create an S3 bucket.  s3fuse will fail to start if the 
  key file is group- or world-readable or -writable.

auth_data for Google Storage:

  To use Google Storage with OAuth, run s3fuse_gs_get_token to obtain a token:

    s3fuse_gs_get_token <path-to-token-file>

  This utility will generate a URL that must be copied and pasted into the 
  address bar of a browser.  You will then be asked to sign into your Google
  account (if not already signed in), and then asked to grant Google Storage
  access rights to s3fuse.  After accepting, return to s3fuse_gs_get_token and
  enter the authentication code.

  Next, set auth_data in s3fuse.conf to the location of the token file, e.g.:

    auth_data=/home/user/.s3fuse/gs.token

  s3fuse will fail to start if the token file is group- or world-readable or 
  -writable.

Non-US AWS Buckets
------------------

You may need to modify the "aws_service_endpoint" configuration option to 
support non-US buckets.  For instance, the following line in s3fuse.conf
enables use of EU buckets:
 
  aws_service_endpoint=s3-eu-west-1.amazonaws.com

File Encryption
---------------

s3fuse-0.13 adds early support for transparent file content encryption.

Three configuration options are relevant:

  - use_encryption: Defaults to "false", set to "true" to enable encryption.
  - encrypt_new_files: Defaults to "true", set to "false" to disable encryption
    of newly-created files (i.e., allow decryption of existing, encrypted
    files, but don't encrypt new files).
  - volume_key_file: See below.

If "use_encryption" is set to "true", s3fuse will prompt for a password during
initialization.  If "volume_key_file" is not empty, s3fuse will skip the 
password prompt and read the volume key from the specified file.  The file 
should contain a hex-encoded key 128, 192, or 256 bits long.  OpenSSL can be 
used to generate the key.  For instance ("32" below refers to the key size in 
bytes):

  openssl rand -hex 32 > /home/user/.s3fuse/bucket.vk

Set the permissions on the key file such that only the owner can read/write
(s3fuse will abort otherwise):

  chmod 0600 /home/user/.s3fuse/bucket.vk

And set volume_key accordingly:

  volume_key_file=/home/user/.s3fuse/bucket.vk

s3fuse will not immediately report an error if the password or volume key 
specified is not valid.  Instead, when accessing a file encrypted with a
different password/volume key, operations will fail with -EACCES ("Access 
denied").  The file can still be deleted or renamed (as these operations do 
not read or modify the contents).

Note that only file contents are encrypted.  Names are not.  Object metadata 
is not.  Symlink targets are not.  Directory contents are not.

Also note that s3fuse encrypts contents during upload and decrypts during 
download.  The locally-cached copy of an open file (which is generally kept in 
/tmp) remains unencrypted.

File Encryption Details
-----------------------

File contents are encrypted with AES, in CTR mode, using a 256-bit key unique 
to the file.  The unique file key, a nonce, and a hash of the plaintext are 
then encrypted with AES in CBC mode using the volume key and a random IV.  
The encrypted key/nonce/hash combination and the IV are stored out of band as 
file metadata attributes.

MacOS
-----

Early MacOS support is available as of s3fuse-0.12.  This support is built on
fuse4x, which can be installed with MacPorts:

  sudo port install fuse4x

Run s3fuse the same way you would on a Linux system.  Passing the 
"noappledouble" option to FUSE is strongly suggested -- this will prevent
MacOS (the Finder?) from trying to open or create .DS_Store files in every 
directory you browse through.

Glacier
-------

s3fuse-0.13 adds preliminary support for restoring files from Glacier.  Before
reading further, read this:

  http://aws.typepad.com/aws/2012/11/archive-s3-to-glacier.html

Pay particular attention to the pricing structure for restore requests.

Opening a file archived to Glacier will return an -EIO error.  If s3fuse's 
Glacier support is enabled, requests can be issued to restore files to S3.  
Three extended attributes are used to query Glacier-related status 
information:

  - s3fuse_storage_class: Reports the current storage class of the object
      (can be STANDARD, REDUCED_REDUNDANCY, or GLACIER).
  - s3fuse_restore_ongoing: "true" if a restore of the object is ongoing, 
      "false" otherwise.
  - s3fuse_restore_expiry: If the object is a restored copy of a Glacier 
      archive, this will be the date at which the restored copy expires.

Restores are initiated by setting the "s3fuse_request_restore" extended
attribute to the number of days to retain the retrieved copy.  For instance,
to restore "some_path/some_file" for four days, assuming the bucket is mounted 
at /mnt, on OS X:

  xattr -w s3fuse_request_restore 4 /mnt/some_path/some_file

And on Linux:

  setfattr -n user.s3fuse_request_restore -v 4 /mnt/some_path/some_file

The status of a pending restore operation can be checked using xattr/getfattr:

  $ xattr -l /mnt/some_path/some_file
  s3fuse_content_type: binary/encrypted-s3fuse-file_0100
  s3fuse_etag: "9d768fd6ff0386566152ddad5fb3cc10"
  s3fuse_restore_ongoing: true
  s3fuse_sha256: 32f1e12dc2d4101873e85fe99147ccbadff06925811e7e79e3fbae934336aeb4
  s3fuse_storage_class: GLACIER

  $ getfattr -d /mnt/some_path/some_file
  # file: /mnt/some_path/some_file
  user.s3fuse_content_type="binary/encrypted-s3fuse-file_0100"
  user.s3fuse_etag="\"9d768fd6ff0386566152ddad5fb3cc10\""
  user.s3fuse_restore_ongoing="true"
  user.s3fuse_sha256="32f1e12dc2d4101873e85fe99147ccbadff06925811e7e79e3fbae934336aeb4"
  user.s3fuse_storage_class="GLACIER" 

Upon completion, restored file attributes will list an expiry date:

  $ xattr -l /mnt/some_path/some_file
  s3fuse_content_type: binary/encrypted-s3fuse-file_0100
  s3fuse_etag: "9d768fd6ff0386566152ddad5fb3cc10"
  s3fuse_request_restore: set-to-num-days-for-restore
  s3fuse_restore_expiry: Thu, 13 Dec 2012 00:00:00 GMT
  s3fuse_restore_ongoing: false
  s3fuse_sha256: 32f1e12dc2d4101873e85fe99147ccbadff06925811e7e79e3fbae934336aeb4
  s3fuse_storage_class: GLACIER

  $ getfattr -d /mnt/some_path/some_file
  # file: /mnt/some_path/some_file
  user.s3fuse_content_type="binary/encrypted-s3fuse-file_0100"
  user.s3fuse_etag="\"9d768fd6ff0386566152ddad5fb3cc10\""
  user.s3fuse_request_restore="set-to-num-days-for-restore"
  user.s3fuse_restore_expiry="Thu, 13 Dec 2012 00:00:00 GMT"
  user.s3fuse_restore_ongoing="false"
  user.s3fuse_sha256="32f1e12dc2d4101873e85fe99147ccbadff06925811e7e79e3fbae934336aeb4"
  user.s3fuse_storage_class="GLACIER"

Restored files are functionally read-only.  Opening a restored file for writing
will not fail, but the flush operation that attempts to upload the file back to 
S3 will fail.

By default, Glacier support is disabled.  Enable it by setting the following 
option in s3fuse.conf:

  allow_glacier_restores=true

Running
-------

s3fuse can be launched from the command line:

  s3fuse [options] <mountpoint>

Some (potentially useful) command line options:

  -f                Keeps s3fuse in the foreground (i.e., prevents it from 
                    daemonizing).  Useful when debugging.
  -v                Enable verbose logging to stderr (repeat for added 
                    verbosity).
  -o <fuse-options> Pass additional options, separated by commas.
    options:
      allow_other         Allow other users to access the mounted file system.
      allow_root          Allow root to access the mounted file system.
      config=<file>       Use <file> rather than the default configuration file.
      stats=<file>        Write statistics to <file>
      daemon_timeout=<n>  Set FUSE timeout to <n> seconds (OS X only).
      noappledouble       Disable testing for/creating .DS_Store files (OS X only).

This is not intended to be an exhaustive listing of FUSE options.

Alternatively, s3fuse can be launched by mount if an appropriate entry exists
in /etc/fstab:

  s3fuse <mountpount> fuse defaults,noauto,user,allow_other 0 0

"user" allows non-root users to mount the file system.  "noauto" prevents the
file system from being automatically mounted at boot.

Multiple buckets can be mounted simultaneously, provided each has its own
configuration file and a corresponding entry in /etc/fstab:

  s3fuse /media/bucket0 fuse defaults,noauto,user,allow_other,config=/etc/s3fuse.bucket0.conf 0 0
  s3fuse /media/bucket1 fuse defaults,noauto,user,allow_other,config=/etc/s3fuse.bucket1.conf 0 0
